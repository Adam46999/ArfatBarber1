// src/hooks/useBookingSubmit.js
import { useState, useEffect, useRef } from "react";
import { getMessaging, getToken } from "firebase/messaging";
import { app } from "../firebase";
import {
  isPhoneBlocked,
  hasExistingBookings,
  hasActiveConflict,
  createBooking,
} from "../services/bookingService";

/**
 * ┘Е╪│╪д┘И┘Д ╪╣┘Ж ╪з┘Д╪к╪н┘В┘В ┘И╪з┘Д╪е╪▒╪│╪з┘Д ┘И╪е┘Ж╪┤╪з╪б ┘Г┘И╪п ╪з┘Д╪н╪м╪▓ + ┘Е╪╣╪з┘Д╪м╪й ╪▒╪│╪з╪ж┘Д ╪з┘Д┘Ж╪м╪з╪н
 * ╪з┘Д┘Е╪к╪╖┘Д╪и╪з╪к: ╪к┘Е╪▒┘К╪▒ ┘В┘К┘Е ╪з┘Д┘Ж┘Е┘И╪░╪м ┘И╪п╪з┘Д╪й ╪з┘Д╪к╪▒╪м┘Е╪й t
 */
export default function useBookingSubmit(form, setForm, t) {
  const [submitted, setSubmitted] = useState(false);
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
  const [code, setCode] = useState("");
  const messageRef = useRef(null);

  // ╪┤╪▒┘К╪╖ ╪з┘Д╪к┘В╪п┘Е (5 ╪о╪╖┘И╪з╪к)
  const { fullName, phoneNumber, selectedDate, selectedTime, selectedService } =
    form;
  const [step, setStep] = useState(0);
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    let current = 0;
    if (fullName) current++;
    if (phoneNumber) current++;
    if (selectedDate) current++;
    if (selectedTime) current++;
    if (selectedService) current++;
    setStep(current);
    setProgress((current / 5) * 100);
  }, [fullName, phoneNumber, selectedDate, selectedTime, selectedService]);

  useEffect(() => {
    if (submitted && messageRef.current) {
      messageRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [submitted]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    // ╪к╪н┘В┘В ╪з┘Д╪н┘В┘И┘Д ╪з┘Д┘Е╪╖┘Д┘И╪и╪й
    if (
      !fullName ||
      !phoneNumber ||
      !selectedDate ||
      !selectedTime ||
      !selectedService
    ) {
      alert(t("fill_required_fields"));
      return;
    }

    // ╪н╪з┘И┘Д ╪г╪о╪░ FCM
    let fcmToken = "";
    try {
      const messaging = getMessaging(app);
      fcmToken = await getToken(messaging, {
        vapidKey:
          "BMSKYpj6OfL2RinVjw4jUNlL-Hbi1Ev4eiTibIKlvFwqSULUm42ricVJRcKbptmiepuDbl3andf-F2tf7Cmr-U8",
      });
    } catch (err) {
      console.warn("FCM token error", err);
    }

    // ╪к┘Ж╪╕┘К┘Б ╪▒┘В┘Е ╪з┘Д┘З╪з╪к┘Б ┘Д┘Д╪г╪▒┘В╪з┘Е ┘Б┘В╪╖
    const cleanPhone = phoneNumber.replace(/\D/g, "");

    // ╪▒┘В┘Е ┘Е╪н╪╕┘И╪▒╪Я
    if (await isPhoneBlocked(cleanPhone)) {
      alert("ЁЯЪл ┘З╪░╪з ╪з┘Д╪▒┘В┘Е ┘Е╪н╪╕┘И╪▒ ┘Е┘Ж ╪з┘Д╪н╪м╪▓. ┘К╪▒╪м┘Й ╪з┘Д╪к┘И╪з╪╡┘Д ┘Е╪╣ ╪з┘Д╪н┘Д╪з┘В.");
      return;
    }

    // ┘Д╪п┘К┘З ╪н╪м┘И╪▓╪з╪к ╪│╪з╪и┘В╪й╪Я
    if (await hasExistingBookings(cleanPhone)) {
      const confirmNew = window.confirm(
        "тЪая╕П ┘К┘И╪м╪п ┘Д╪п┘К┘Г ╪н╪м┘И╪▓╪з╪к ╪│╪з╪и┘В╪й ╪и╪▒┘В┘Е ╪з┘Д┘З╪з╪к┘Б ┘З╪░╪з. ┘З┘Д ╪к╪▒┘К╪п ╪е╪╢╪з┘Б╪й ╪н╪м╪▓ ╪м╪п┘К╪п╪Я"
      );
      if (!confirmNew) return;
    }

    // ╪к╪╣╪з╪▒╪╢ ╪╣┘Д┘Й ┘Ж┘Б╪│ ╪з┘Д╪│╪з╪╣╪й╪Я
    if (await hasActiveConflict(selectedDate, selectedTime)) {
      alert(
        t("time_already_booked") ||
          "┘З╪░┘З ╪з┘Д╪│╪з╪╣╪й ┘Е╪н╪м┘И╪▓╪й ╪и╪з┘Д┘Б╪╣┘Д╪М ┘К╪▒╪м┘Й ╪з╪о╪к┘К╪з╪▒ ╪│╪з╪╣╪й ╪г╪о╪▒┘Й."
      );
      return;
    }

    try {
      // ╪е┘Ж╪┤╪з╪б ┘Г┘И╪п ┘И╪к╪з┘К┘Е╪│╪к╪з┘Е╪и
      const bookingCode = Math.random().toString(36).substring(2, 8);
      setCode(bookingCode);
      const bookingDateTime = new Date(`${selectedDate}T${selectedTime}:00`);
      const timestamp = bookingDateTime.getTime();

      await createBooking({
        fullName,
        phoneNumber: cleanPhone,
        selectedDate,
        selectedTime,
        selectedService,
        bookingCode,
        timestamp,
        reminderSent_60: false,
        reminderSent_30: false,
        fcmToken,
      });

      // ┘Ж╪м╪з╪н
      setSubmitted(true);
      setShowSuccessMessage(true);
      setTimeout(() => setShowSuccessMessage(false), 16000);

      // ╪е╪╣╪з╪п╪й ╪╢╪и╪╖ ╪з┘Д┘Ж┘Е┘И╪░╪м
      setForm({
        fullName: "",
        phoneNumber: "",
        selectedDate: "",
        selectedTime: "",
        selectedService: "",
      });
    } catch (err) {
      console.error("createBooking error:", err);
      alert("╪н╪п╪л ╪о╪╖╪г ╪г╪л┘Ж╪з╪б ╪н┘Б╪╕ ╪з┘Д╪н╪м╪▓╪М ┘К╪▒╪м┘Й ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Д╪з╪н┘В┘Л╪з.");
    }
  };

  return {
    handleSubmit,
    submitted,
    showSuccessMessage,
    setShowSuccessMessage,
    code,
    step,
    progress,
    messageRef,
  };
}
